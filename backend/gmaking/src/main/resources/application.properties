spring.application.name=gmaking

# .env file
spring.config.import=optional:file:./.env

# ======================
# Database
# ======================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# ======================
# Server
# ======================
server.port=8080
model.server.url=http://127.0.0.1:8000
spring.mvc.async.request-timeout=900000

# ======================
# Dev Tools
# ======================dlf
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true

# ======================
# MyBatis
# ======================
mybatis.mapper-locations=classpath:/mapper/**/*.xml
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis.configuration.map-underscore-to-camel-case=true

# ======================
# JWT
# ======================
jwt.secret-key=${JWT_SECRET_KEY}
jwt.token-validity-in-seconds=${JWT_TOKEN_VALIDITY_SECONDS}

# ======================
# Mail
# ======================
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

email.verification.expiry-seconds=${EMAIL_VERIFICATION_EXPIRY_SECONDS}
email.verification.sender-name=${MAIL_SENDER_NAME}

# ======================
# Logging
# ======================
logging.level.com.project.gmaking=DEBUG
logging.level.org.mybatis=DEBUG
logging.level.org.springframework.mail=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.web.servlet=DEBUG
logging.level.org.springframework.web.filter=DEBUG

# ======================
# Google OAuth2
# ======================
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# ======================
# Naver OAuth2
# ======================
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
spring.security.oauth2.client.registration.naver.client-name=Naver

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# ======================
# Kakao OAuth2
# ======================
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao

spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# ======================
# App OAuth Redirect
# ======================
app.oauth2.redirect-uri=${APP_OAUTH2_REDIRECT_URI}

# ======================
# Google
# ======================
gemini.api.key=${GOOGLE_API_KEY:${GEMINI_API_KEY:}}
gemini.model.name=${GEMINI_MODEL_NAME:gemini-2.0-flash}


# ======================
# IMAGE_URL
# ======================
# profile
app.upload.profile-dir=D:/Gmaking-Img
app.upload.public-url-prefix=/images

# ======================
# IMAGE_SIZE
# ======================
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
# ======================
# Google Cound Computing
# ======================
gcp.storage.bucket-name=${GCP_BUCKET_NAME}
gcp.storage.key-file-path=${GCP_KEY_FILE_PATH}

# ======================
# GPT API KEY
# ======================
gpt.api.key=${GPT_API_KEY}
gpt.image.api.url=https://api.openai.com/v1/images/generations
gpt.image.model.name=dall-e-3

openai.api.key=${OPENAI_API_KEY}
chat.model=gpt-4o-mini

gemini.api.url=https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent
# ======================
# PORTONE KEY
# ======================
iamport.api.key=${IAMPORT_API_KEY}
iamport.api.secret=${IAMPORT_API_SECRET}
iamport.api.base-url=http://api.iamport.kr

iamport.http.connect-timeout=5000
iamport.http.read-timeout=5000


# ======================
# RAG (Guide Bot)
# ======================
# autoingust off=false, on=true
app.rag.autoIngest=false
app.rag.guidesDir=classpath:guides
app.rag.topK=4

# ======================
# RAG
# ======================
openai.rag.api-key=${OPENAI_RAG_API_KEY:${OPENAI_API_KEY:${openai.api.key:}}}
openai.rag.chat-model=gpt-4o-mini
openai.rag.embedding-model=text-embedding-3-small
openai.rag.temperature=0.2
