<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.gmaking.login.dao.LoginDAO">

    <resultMap id="loginResultMap" type="com.project.gmaking.login.vo.LoginVO">
        <id column="USER_ID" property="userId"/>
        <result column="USER_NAME" property="userName"/>
        <result column="USER_EMAIL" property="userEmail"/>
        <result column="IS_EMAIL_VERIFIED" property="isEmailVerified"/>
        <result column="USER_PASSWORD" property="userPassword"/>
        <result column="USER_NICKNAME" property="userNickname"/>
        <result column="IMAGE_ID" property="imageId"/>
        <result column="CREATED_DATE" property="createdDate"/>
        <result column="ROLE" property="role"/>

        <result column="HAS_CHARACTER" property="hasCharacter"/>
        <result column="CHARACTER_IMG_URL" property="characterImageUrl"/>
        <result column="INCUBATOR_COUNT" property="incubatorCount"/>
        <result column="IS_AD_FREE" property="isAdFree"/>

        <result column="CHARACTER_COUNT" property="characterCount"/>
    </resultMap>

    <select id="selectUserById" resultMap="loginResultMap">
        SELECT
            T1.USER_ID,
            T1.USER_NAME,
            T1.USER_EMAIL,
            T1.IS_EMAIL_VERIFIED,
            T1.USER_PASSWORD,
            T1.USER_NICKNAME,
            T1.IMAGE_ID,
            T1.ROLE,
            T1.CREATED_DATE,
            T1.HAS_CHARACTER,
            T1.INCUBATOR_COUNT,
            T1.IS_AD_FREE,
            TBI.IMAGE_URL AS CHARACTER_IMG_URL,
        (SELECT COUNT(*) FROM tb_character TBC_COUNT WHERE TBC_COUNT.USER_ID = T1.USER_ID) AS CHARACTER_COUNT
        FROM TB_USER T1
                 LEFT JOIN TB_CHARACTER TBC ON T1.CHARACTER_ID = TBC.CHARACTER_ID
                 LEFT JOIN TB_IMAGE TBI ON TBC.IMAGE_ID = TBI.IMAGE_ID
        WHERE T1.USER_ID = #{userId}
    </select>

    <insert id="register" parameterType="com.project.gmaking.login.vo.RegisterRequestVO">
        INSERT INTO TB_USER (
            USER_ID,
            USER_NAME,
            USER_EMAIL,
            IS_EMAIL_VERIFIED,
            USER_PASSWORD,
            USER_NICKNAME,
            ROLE
        ) VALUES (
                    #{userId},
                    #{userName},
                    #{userEmail},
                    'N',
                    #{userPassword},
                    #{userNickname},
                    'USER'
                )
    </insert>

    <select id="checkDuplicate" resultType="int">
        SELECT
        COUNT(*)
        FROM TB_USER
        WHERE
        <choose>
            <when test="type == 'userId'">USER_ID = #{value}</when>
            <when test="type == 'userNickname'">USER_NICKNAME = #{value}</when>
            <when test="type == 'userEmail'">USER_EMAIL = #{value}</when>
            <otherwise>1 = 0</otherwise>
        </choose>
    </select>

    <delete id="deleteUser">
        DELETE
        FROM TB_USER
        WHERE USER_ID = #{userId}
    </delete>

    <select id="findUserIdByNameAndEmail" resultType="string">
        SELECT USER_ID
        FROM TB_USER
        WHERE USER_NAME = #{userName} AND USER_EMAIL = #{userEmail}
    </select>

    <update id="updatePassword">
        UPDATE TB_USER
        SET USER_PASSWORD = #{newHashedPassword}
        WHERE USER_ID = #{userId}
    </update>

    <insert id="insertSocialUser" parameterType="com.project.gmaking.login.vo.LoginVO">
        INSERT INTO TB_USER (
            USER_ID,
            USER_NAME,
            USER_EMAIL,
            IS_EMAIL_VERIFIED,
            USER_PASSWORD,
            USER_NICKNAME,
            ROLE
        ) VALUES (
                     #{userId},
                     #{userName},
                     #{userEmail},
                     'Y',
                     #{userPassword},
                     #{userNickname},
                     'USER'
                 )
    </insert>

    <select id="selectUserBySocialId" resultMap="loginResultMap">
        SELECT
            T1.USER_ID,
            T1.USER_NAME,
            T1.USER_EMAIL,
            T1.IS_EMAIL_VERIFIED,
            T1.USER_PASSWORD,
            T1.USER_NICKNAME,
            T1.IMAGE_ID,
            T1.ROLE,
            T1.CREATED_DATE,
            T1.HAS_CHARACTER,
            T1.INCUBATOR_COUNT,
            T1.IS_AD_FREE,
            TBI.IMAGE_URL AS CHARACTER_IMG_URL,
        (SELECT COUNT(*) FROM tb_character TBC_COUNT WHERE TBC_COUNT.USER_ID = T1.USER_ID) AS CHARACTER_COUNT
        FROM TB_USER T1
                 LEFT JOIN TB_CHARACTER TBC ON T1.CHARACTER_ID = TBC.CHARACTER_ID
                 LEFT JOIN TB_IMAGE TBI ON TBC.IMAGE_ID = TBI.IMAGE_ID
        WHERE T1.USER_ID = #{userId}
    </select>

    <select id="selectUserByEmail" resultMap="loginResultMap">
        SELECT
            T1.USER_ID,
            T1.USER_NAME,
            T1.USER_EMAIL,
            T1.IS_EMAIL_VERIFIED,
            T1.USER_PASSWORD,
            T1.USER_NICKNAME,
            T1.IMAGE_ID,
            T1.ROLE,
            T1.CREATED_DATE,
            T1.HAS_CHARACTER,
            T1.INCUBATOR_COUNT,
            T1.IS_AD_FREE,
            TBI.IMAGE_URL AS CHARACTER_IMG_URL,
            (SELECT COUNT(*) FROM tb_character TBC_COUNT WHERE TBC_COUNT.USER_ID = T1.USER_ID) AS CHARACTER_COUNT
        FROM TB_USER T1
                LEFT JOIN TB_CHARACTER TBC ON T1.USER_ID = TBC.USER_ID
                LEFT JOIN TB_IMAGE TBI ON TBC.IMAGE_ID = TBI.IMAGE_ID
        WHERE T1.USER_EMAIL = #{userEmail}
        ORDER BY TBC.CREATED_DATE DESC
        LIMIT 1
    </select>

    <update id="updateUserCharacterInfo">
        UPDATE TB_USER
        SET
            HAS_CHARACTER = TRUE
        WHERE USER_ID = #{userId}
    </update>

    <!-- 0개 미만으로 감소 방지 -->
    <update id="decrementIncubatorCount">
        UPDATE TB_USER
        SET INCUBATOR_COUNT = INCUBATOR_COUNT - 1
        WHERE USER_ID = #{userId}
        AND INCUBATOR_COUNT &gt;= 1
    </update>

</mapper>